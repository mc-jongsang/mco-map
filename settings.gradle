pluginManagement {
    repositories {
        gradlePluginPortal()
    }
    resolutionStrategy {
        eachPlugin {
            if (requested.id.id == "ru.netris.commitlint") {
                useModule("ru.netris:commitlint-plugin:${requested.version}")
            }
        }
    }
}

rootProject.name = 'mco-map'
[
        "map-infra:cloud.config",
        "map-infra:cloud.gateway",
        "map-services:api.media",
        "map-services:api.media-admin",
        "map-services:api.client",
        "map-services:api.client-admin",
        "map-services:api.auth"
].each {
    if (it.indexOf("global") != -1) {
        def dir = makeDir(rootDir, it)
        intiProjectFolder(dir, it);
    } else {
        def projectNameArr = it.split(":")

        def prefixName = projectNameArr[0]
        def projectName = projectNameArr[1]
        def dir = makeDir(rootDir, prefixName)
        def subDir = makeDir(dir, projectName)
        intiProjectFolder(subDir, it);
    }

}

def intiProjectFolder(dir, projectFullName) {
    // add .gitigrore file
    def gitFile = new File(dir.absolutePath, ".gitignore")
    if (!gitFile.exists()) {
        gitFile.text = "build/"
    }

    def gradleFile = new File(dir.absolutePath, "build.gradle")
    if (!gradleFile.exists()) {
        gradleFile.text =
                """

                    dependencies {

                    }

                    """.stripIndent(20)
    }
    [
            "src/main/java/io/bigin",
            "src/main/resources",
            "src/test/java//io/bigin",
            "src/test/resources"

    ].each { srcDir ->
        def srcFolder = new File(dir.absolutePath, srcDir)
        if (!srcFolder.exists()) {
            srcFolder.mkdirs()
        }
    }
    def projectName = ":${projectFullName}"

    include projectName
    project(projectName).projectDir = dir
}


def makeDir(attachedDir, name) {
    def dir = new File(attachedDir, name)
    if (!dir.exists()) {
        dir.mkdirs()
    }
    return dir;
}